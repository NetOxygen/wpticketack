{"version":3,"sources":["ext/ticketack.js"],"names":["e","a","Ticketack","checkUrl","lang","module","exports","define","amd","moment","this","passesUrl","l","url","parametrize_url","eshopUrl","ticketViewUrl","getCheckoutUrl","Object","prototype","toString","call","cartJsonUrl","getTicketViewUrl","cartAddArticlesUrl","cartSetPendingUrl","params","tickettype_id","confirmUrl","screeningUrl","pricing_id","unbookUrl","loginUrl","t","logoutUrl","h","err","getScreeningsInfo","screening_refs","c","s","_pf","data","tickettype","PHPSESSID","invalidMonth","invalidFormat","parsedDateParts","setOpen","request","get","n","callback","status","empty","invalidWeekday","weekdayMismatch","nullInput","userInvalidated","meridiem","localStorage","rsp","unusedTokens","length","bigHour","isFrozen","session_id","that","_isValid","post","L","Y","some","Array","book","pricing","format","headers","o","_isAMomentObject","undefined","_i","_f","_l","_strict","_tzm","_isUTC","_offset","_locale","d","userdata","json","_d","getTime","NaN","isValid","Date","updateOffset","D","articles","Math","ceil","floor","g","cart_id","r","getNew","abs","w","suppressDeprecationWarnings","console","warn","user_data","deprecationHandler","payUrl","arguments","confirm","slice","index","push","cartRemoveUrl","checkBookability","screening_ref","Error","stack","S","v","H","Function","b","i","updateTicketEmail","email","j","keys","x","P","toLowerCase","O","E","A","query","pow","max","substr","z","J","N","R","join","F","apply","ordinal","JSON","ajax","$","G","localeData","type","method","match","replace","crossDomain","xhrFields","withCredentials","textStatus","jqXHR","responseJSON","root","lastIndex","test","U","self","V","K","Z","B","q","Q","X","ee","ae","te","se","ne","de","re","_e"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * Ticketack integration class\n *\n * This class can manage all the Ticketack public API calls:\n *     - Compute URLs to view user cart, user pass (bookings), show screening\n *       page and buy pass page on the Ticketack eshop\n *     - Load the user cart\n *     - Add a screening to the user cart\n *     - Remove a screening from the user cart\n *     - Check a screening bookability\n *     - Login with a ticket\n *     - Book a screening with a ticket\n *     - Cancel a booking on a ticket\n *     - List the available passes\n *     - Update e-mail information in ticket\n *\n * @version 5.2.0 - 2019-06-13\n *\n * @copyright NetOxygen 2015-2018\n *\n * @param {String} eshopUrl: The Ticketack instance base URL\n * @param {String} apiKey: The API key\n * @param {String} lang: The language\n */\nvar Ticketack = function(eshopUrl, apiKey, lang) {\n\n    this.session_id            = localStorage.getItem('tkt_session_id') != undefined ? localStorage.getItem('tkt_session_id') : \"\";\n    this.eshopUrl              = eshopUrl;\n    this.apiKey                = apiKey;\n    this.lang                  = lang ? lang : '';\n\n    this.cartViewUrl           = this.eshopUrl + \"cart/view/\";\n    this.checkoutUrl           = this.eshopUrl + \"cart/validate/\";\n    this.ticketViewUrl         = this.eshopUrl + \"ticket/view/\";\n    this.passesViewUrl         = this.eshopUrl + \"pass/new/\";\n    this.screeningViewUrl      = this.eshopUrl + \"screening/buy/\";\n\n    this.cartJsonUrl           = this.eshopUrl + \"cart/view_json\";\n    this.cartRemoveUrl         = this.eshopUrl + \"cart/remove\";\n    this.cartAddUrl            = this.eshopUrl + \"screening/buy/\";\n    this.cartAddArticlesUrl    = this.eshopUrl + \"articles/add_to_cart\";\n    this.cartSetPendingUrl     = this.eshopUrl + \"carts/pending/id/\";\n    this.cartSetOpenUrl        = this.eshopUrl + \"carts/open/id/\";\n    this.cartGetNewUrl         = this.eshopUrl + \"carts/new/\";\n    this.cartUserDataUrl       = this.eshopUrl + \"carts/user_data/\";\n    this.payUrl                = this.eshopUrl + \"carts/pay/id/\";\n    this.confirmUrl            = this.eshopUrl + \"carts/confirm/id/\";\n    this.screeningUrl          = this.eshopUrl + \"screening/info_json/\";\n    this.bookUrl               = this.eshopUrl + \"screening/book_on_ticket/\";\n    this.unbookUrl             = this.eshopUrl + \"ticket/cancel_booking_json/\";\n    this.checkUrl              = this.eshopUrl + \"screening/bookability/\";\n    this.loginUrl              = this.eshopUrl + \"ticket/view_json/\";\n    this.logoutUrl             = this.eshopUrl + \"ticket/disable_book_mode_json/\";\n    this.updateTicketEmailUrl  = this.eshopUrl + \"tickets/contact_email/\";\n    this.passesUrl             = this.eshopUrl + \"pass/tickettypes_json/\";\n};\n\n/**\n * User cart url getter\n */\nTicketack.prototype.getCartViewUrl   = function() {\n    var url = this.parametrize_url(this.cartViewUrl, {});\n    return url;\n}\n\n/**\n * Checkout page url getter\n */\nTicketack.prototype.getCheckoutUrl   = function() {\n    var url = this.parametrize_url(this.checkoutUrl, {});\n    return url;\n}\n\n/**\n * User ticket url getter\n */\nTicketack.prototype.getTicketViewUrl = function() {\n    var url = this.parametrize_url(this.ticketViewUrl, {});\n    return url;\n}\n\n/**\n * Buy pass url getter (optional tickettype_id and pricing_id to select specific pass)\n */\nTicketack.prototype.getPassesViewUrl = function(tickettype_id, pricing_id) {\n    var params = {};\n    if (tickettype_id) {\n        params.tickettype = tickettype_id;\n        if (pricing_id) {\n            params.pricing = pricing_id;\n        }\n    }\n    var url = this.parametrize_url(this.passesViewUrl, params);\n    return url;\n}\n\n/**\n * Buy screening url getter\n */\nTicketack.prototype.getScreeningViewUrl = function(screening_ref) {\n    var url = this.parametrize_url(this.screeningViewUrl + screening_ref, {});\n    return url;\n}\n\n/**\n * Fetch cart data from Eshop\n *\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.loadCart = function(callback) {\n    var that = this;\n    var url = this.parametrize_url(this.cartJsonUrl, {}, true);\n\n    return this.get(url, {}, function (err, status, rsp) {\n        if (err)\n            return callback && callback(err, status, rsp);\n\n        localStorage.setItem('tkt_session_id', rsp.session_id);\n        that.session_id = rsp.session_id;\n\n        return callback && callback(null, status, rsp);\n    });\n};\n\n/**\n * Fetch the informations about a screening\n *\n * @param {Array} screening_refs: Array with screening_refs\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.getScreeningsInfo = function(screening_refs, callback) {\n    var url = this.parametrize_url(this.screeningUrl, { \"ids\": screening_refs.join(\",\") }, true);\n    return this.get(url, {}, callback);\n}\n\n/**\n * Add a screening to cart\n *\n * @param {UUID|Number} screening_id: The screening ID\n * @param {Object} pricing: An object containing pricing properties. Ex: {\"reduced\": 1, \"fullprice\": 2}\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addToCart = function(screening_id, pricing, callback) {\n    var data = {\n        \"id\":        screening_id,\n        \"pricing\":   pricing || {}\n    };\n    return this.post(this.cartAddUrl + screening_id, data, callback);\n};\n\n/**\n * Add a pass to cart\n *\n * @param {String} pass: The pass type\n * @param {String} pricing: The pricing key\n * @param {Object} userdata: The user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addPassToCart = function(pass, pricing, userdata, callback) {\n    headers = {};\n    headers['X-API-Key']    = this.apiKey;\n    headers['Content-type'] = undefined;\n\n    userdata.pass = pass + ':' + pricing;\n    let data = {\n        \"user\": userdata,\n        \"format\": \"json\"\n    };\n    if (this.session_id)\n        data.PHPSESSID = this.session_id;\n\n    return this.post(this.passesViewUrl, data, callback);\n};\n\n/**\n * Add articles to cart\n *\n * @param {Array} articles: An array of articles with the following properties:\n *                          - _id: the article _id\n *                          - variants: an arraay of {\n *                              \"_id\": the variant _id,\n *                              \"quantity\": the quantity,\n *                              \"price\": the variant price\n *                          }\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addArticlesToCart = function(articles, callback) {\n    var data = { \"articles\":  articles };\n    return this.request(\n        'POST',\n        this.parametrize_url(this.cartAddArticlesUrl, {}, true),\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set the cart in PENDING mode\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setPending = function(cart_id, callback) {\n    return this.request(\n        'PUT',\n        this.cartSetPendingUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set the cart in OPEN mode\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setOpen = function(cart_id, callback) {\n    return this.request(\n        'PUT',\n        this.cartSetOpenUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Get a new cart\n *\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.getNew = function(callback) {\n    return this.request(\n        'GET',\n        this.cartGetNewUrl,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set a cart user data\n *\n * @param {Object} user_data: An object containing the user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setUserData = function(cart_id, user_data, callback) {\n    var data = {\n        \"user_data\": user_data\n    };\n    return this.request(\n        'PUT',\n        this.cartUserDataUrl + cart_id,\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Pay the cart\n *\n * @param {integer} cart_id: The cart id\n * @param {string} payment_method: The payment method name\n * @param {Object} user_data: An object containing the user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.pay = function(cart_id, payment_method, user_data, callback) {\n    var data = {\n        \"payment_method\": payment_method,\n        \"user\": user_data\n    };\n    return this.request(\n        'POST',\n        this.payUrl + cart_id,\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Confirm a cart\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.confirm = function(cart_id, callback) {\n    return this.request(\n        'POST',\n        this.confirmUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Remove screening from cart\n *\n * @param {Number} index: The screening index in cart\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.removeFromCart = function(index, callback) {\n    var data = { \"index\": index };\n    return this.post(this.cartRemoveUrl, data, callback);\n}\n\n/**\n * Screening bookability check\n *\n * Check if the user can book the screening\n *\n * @param {UUID|Number} screening_ref: The screening ID\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.checkBookability = function(screening_ref, callback) {\n    var url = this.parametrize_url(this.checkUrl + screening_ref, {}, true);\n    return this.get(url, {}, callback);\n};\n\n/**\n * Ticket authentication\n *\n * Authenticates the user ticket\n *\n * @param number: The ticket number\n * @param key: The ticket key\n * @param callback\n */\nTicketack.prototype.loginTicket = function(number, key, callback) {\n    var data    = {\n        \"ticket_number\": number,\n        \"ticket_key\":    key\n    };\n\n    return this.post(this.loginUrl, data, callback);\n};\n\n/**\n * Ticket logout\n *\n * Logs out the user ticket\n *\n * @param callback\n */\nTicketack.prototype.logoutTicket = function(callback) {\n    return this.get(this.logoutUrl, {}, callback);\n};\n\n/**\n * Ticket view\n *\n * retrieve the current(connected) ticket informations\n *\n * @param callback\n */\nTicketack.prototype.viewTicket = function(callback) {\n    return this.post(this.loginUrl, {}, callback);\n};\n\n/**\n * Update user's e-mail address\n *\n * retrieve the current(connected) ticket informations\n *\n * @param callback\n */\nTicketack.prototype.updateTicketEmail = function(email, callback) {\n    var url = this.parametrize_url(this.updateTicketEmailUrl, {}, true);\n    return this.patch(url, { \"email\": email }, callback);\n}\n\n/**\n *\n * Book screening\n *\n * @param screening_id: The screening ID\n * @param callback\n */\nTicketack.prototype.book = function(screening_id, callback) {\n    return this.post(this.bookUrl + screening_id, {}, callback);\n};\n\n/**\n *\n * Cancel a booking\n *\n * @param {UUID|Number} booking_id: The booking ID\n * @param {Function} callback\n */\nTicketack.prototype.unbook = function(booking_id, callback) {\n    return this.post(this.unbookUrl + booking_id, {}, callback);\n};\n\n/**\n *\n * List the available passes\n *\n * @param {Function} callback\n */\nTicketack.prototype.getPasses = function(callback) {\n    var url = this.parametrize_url(this.passesUrl, {}, true);\n    return this.get(url, {}, callback);\n};\n\n/**\n * Make an HTTP GET request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.get = function(url, data, callback) {\n    return this.request('GET', url, data, {}, callback);\n};\n\n/**\n * Make an HTTP POST request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.post = function(url, data, callback) {\n    data        = data || {};\n    data.format = \"json\"\n    data.lang   = this.lang;\n    if (this.session_id)\n        data.PHPSESSID = this.session_id;\n    return this.request('POST', url, data, {}, callback);\n};\n\n/**\n * Make an HTTP PATCH request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.patch = function(url, data, callback) {\n    // ALl requests in this lib should be sent with the application/json content type.\n    // For now, all but the one sent in PATCH (because it calls the \"new\" api/controllers),\n    // are using application/x-www-form-urlencoded.\n    // When all the calls are made to the new controllers, we should set the json\n    // content type by default\n    return this.request('PATCH', url, data, { \"Content-type\": \"application/json\" }, callback);\n};\n\nTicketack.prototype.parametrize_url = function(url, params, json = false) {\n    var query = [];\n\n    query.push(\"lang=\" + this.lang);\n\n    if (json)\n        query.push(\"format=json\");\n\n    if (this.session_id)\n        query.push(\"PHPSESSID=\" + this.session_id);\n\n    for (i in params) {\n        query.push(i + '=' + params[i]);\n    }\n\n    return url + '?' + query.join('&');\n}\n\n/**\n *\n * Make an HTTP request\n *\n * @param {Function} callback\n */\nTicketack.prototype.request = function(method, url, data, headers, callback) {\n    headers = headers || {};\n    headers['X-API-Key'] = this.apiKey;\n\n    if (headers['Content-type'] && headers['Content-type'] == 'application/json')\n        data = JSON.stringify(data);\n\n    return $.ajax(url, {\n        type: method,\n        data: data,\n        headers: headers,\n        crossDomain: true,\n        xhrFields: { withCredentials: true }\n    }).done(\n        function (data, textStatus, jqXHR) {\n            return callback(null, jqXHR.status, jqXHR.responseJSON);\n        }\n    ).fail(\n        function (jqXHR) {\n            var rsp = jqXHR.responseText.length ? JSON.parse(jqXHR.responseText) : null;\n            return callback(new Error(), jqXHR.status, rsp);\n        }\n    );\n};\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], function ($) {\n            return (root.Ticketack = factory($));\n        });\n    } else {\n        // Browser globals\n        root.Ticketack = factory(root.jQuery);\n    }\n}(typeof self !== 'undefined' ? self : this, function ($) {\n    return Ticketack;\n}));\n"]}