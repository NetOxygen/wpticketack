{"version":3,"sources":["ext/ticketack.js"],"names":["e","a","Ticketack","checkUrl","lang","module","exports","define","amd","moment","this","passesUrl","M","url","parametrize_url","eshopUrl","ticketViewUrl","getCheckoutUrl","Object","prototype","toString","call","cartJsonUrl","getTicketViewUrl","cartAddArticlesUrl","cartSetPendingUrl","hasOwnProperty","params","tickettype_id","length","confirmUrl","screeningUrl","bookUrl","h","unbookUrl","logoutUrl","m","err","Date","s","t","l","getPassesViewUrl","valueOf","pricing_id","pricing","L","request","_pf","unusedTokens","getScreeningViewUrl","nullInput","loadCart","that","userInvalidated","parsedDateParts","meridiem","rfc2822","getScreeningsInfo","Y","data","n","screening_id","book","_d","getTime","overflow","empty","invalidEra","invalidMonth","invalidWeekday","weekdayMismatch","invalidFormat","_strict","charsLeftOver","bigHour","isFrozen","post","_isValid","userdata","PHPSESSID","some","Array","session_id","JSON","$","ajax","_isAMomentObject","rsp","r","_i","_f","_l","_tzm","_isUTC","_offset","_locale","f","root","k","getNew","callback","NaN","isValid","updateOffset","D","setUserData","cart_id","user_data","T","suppressDeprecationWarnings","console","warn","d","deprecationHandler","arguments","confirm","removeFromCart","cartRemoveUrl","push","screening_ref","join","Error","stack","apply","g","w","v","Function","H","viewTicket","i","updateTicketEmailUrl","S","get","abs","Math","max","substr","booking_id","keys","getPasses","x","O","P","format","patch","ordinal","json","A","undefined","query","match","j","replace","invalidDate","_this","headers","longDateFormat","apiKey","stringify","test","lastIndex","type","method","crossDomain","xhrFields","done","F","textStatus","localStorage","J","fail","responseText","jqXHR","R","factory","I","ceil","floor"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * Ticketack integration class\n *\n * This class can manage all the Ticketack public API calls:\n *     - Compute URLs to view user cart, user pass (bookings), show screening\n *       page and buy pass page on the Ticketack eshop\n *     - Load the user cart\n *     - Add a screening to the user cart\n *     - Remove a screening from the user cart\n *     - Check a screening bookability\n *     - Login with a ticket\n *     - Book a screening with a ticket\n *     - Cancel a booking on a ticket\n *     - List the available passes\n *     - Update e-mail information in ticket\n *\n * @version 5.2.0 - 2019-06-13\n *\n * @copyright NetOxygen 2015-2018\n *\n * @param {String} eshopUrl: The Ticketack instance base URL\n * @param {String} apiKey: The API key\n * @param {String} lang: The language\n */\nvar Ticketack = function(eshopUrl, apiKey, lang) {\n\n    this.session_id            = localStorage.getItem('tkt_session_id') != undefined ? localStorage.getItem('tkt_session_id') : \"\";\n    this.eshopUrl              = eshopUrl;\n    this.apiKey                = apiKey;\n    this.lang                  = lang ? lang : '';\n\n    this.cartViewUrl           = this.eshopUrl + \"cart/view/\";\n    this.checkoutUrl           = this.eshopUrl + \"cart/validate/\";\n    this.ticketViewUrl         = this.eshopUrl + \"ticket/view/\";\n    this.passesViewUrl         = this.eshopUrl + \"pass/new/\";\n    this.screeningViewUrl      = this.eshopUrl + \"screening/buy/\";\n\n    this.cartJsonUrl           = this.eshopUrl + \"cart/view_json\";\n    this.cartRemoveUrl         = this.eshopUrl + \"cart/remove\";\n    this.cartAddUrl            = this.eshopUrl + \"screening/buy/\";\n    this.cartAddArticlesUrl    = this.eshopUrl + \"articles/add_to_cart\";\n    this.cartSetPendingUrl     = this.eshopUrl + \"carts/pending/id/\";\n    this.cartSetOpenUrl        = this.eshopUrl + \"carts/open/id/\";\n    this.cartGetNewUrl         = this.eshopUrl + \"carts/new/\";\n    this.cartUserDataUrl       = this.eshopUrl + \"carts/user_data/\";\n    this.payUrl                = this.eshopUrl + \"carts/pay/id/\";\n    this.confirmUrl            = this.eshopUrl + \"carts/confirm/id/\";\n    this.screeningUrl          = this.eshopUrl + \"screening/info_json/\";\n    this.bookUrl               = this.eshopUrl + \"screening/book_on_ticket/\";\n    this.unbookUrl             = this.eshopUrl + \"ticket/cancel_booking_json/\";\n    this.checkUrl              = this.eshopUrl + \"screening/bookability/\";\n    this.loginUrl              = this.eshopUrl + \"ticket/view_json/\";\n    this.logoutUrl             = this.eshopUrl + \"ticket/disable_book_mode_json/\";\n    this.updateTicketEmailUrl  = this.eshopUrl + \"tickets/contact_email/\";\n    this.passesUrl             = this.eshopUrl + \"pass/tickettypes_json/\";\n};\n\n/**\n * User cart url getter\n */\nTicketack.prototype.getCartViewUrl   = function() {\n    var url = this.parametrize_url(this.cartViewUrl, {});\n    return url;\n}\n\n/**\n * Checkout page url getter\n */\nTicketack.prototype.getCheckoutUrl   = function() {\n    var url = this.parametrize_url(this.checkoutUrl, {});\n    return url;\n}\n\n/**\n * User ticket url getter\n */\nTicketack.prototype.getTicketViewUrl = function() {\n    var url = this.parametrize_url(this.ticketViewUrl, {});\n    return url;\n}\n\n/**\n * Buy pass url getter (optional tickettype_id and pricing_id to select specific pass)\n */\nTicketack.prototype.getPassesViewUrl = function(tickettype_id, pricing_id) {\n    var params = {};\n    if (tickettype_id) {\n        params.tickettype = tickettype_id;\n        if (pricing_id) {\n            params.pricing = pricing_id;\n        }\n    }\n    var url = this.parametrize_url(this.passesViewUrl, params);\n    return url;\n}\n\n/**\n * Buy screening url getter\n */\nTicketack.prototype.getScreeningViewUrl = function(screening_ref) {\n    var url = this.parametrize_url(this.screeningViewUrl + screening_ref, {});\n    return url;\n}\n\n/**\n * Fetch cart data from Eshop\n *\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.loadCart = function(callback) {\n    var that = this;\n    var url = this.parametrize_url(this.cartJsonUrl, {}, true);\n\n    return this.get(url, {}, function (err, status, rsp) {\n        if (err)\n            return callback && callback(err, status, rsp);\n\n        return callback && callback(null, status, rsp);\n    });\n};\n\n/**\n * Fetch the informations about a screening\n *\n * @param {Array} screening_refs: Array with screening_refs\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.getScreeningsInfo = function(screening_refs, callback) {\n    var url = this.parametrize_url(this.screeningUrl, { \"ids\": screening_refs.join(\",\") }, true);\n    return this.get(url, {}, callback);\n}\n\n/**\n * Add a screening to cart\n *\n * @param {UUID|Number} screening_id: The screening ID\n * @param {Object} pricing: An object containing pricing properties. Ex: {\"reduced\": 1, \"fullprice\": 2}\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addToCart = function(screening_id, pricing, callback) {\n    var data = {\n        \"id\":        screening_id,\n        \"pricing\":   pricing || {}\n    };\n    return this.post(this.cartAddUrl + screening_id, data, callback);\n};\n\n/**\n * Add a pass to cart\n *\n * @param {String} pass: The pass type\n * @param {String} pricing: The pricing key\n * @param {Object} userdata: The user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addPassToCart = function(pass, pricing, userdata, callback) {\n    headers = {};\n    headers['X-API-Key']    = this.apiKey;\n    headers['Content-type'] = undefined;\n\n    userdata.pass = pass + ':' + pricing;\n    let data = {\n        \"user\": userdata,\n        \"format\": \"json\"\n    };\n    if (this.session_id)\n        data.PHPSESSID = this.session_id;\n\n    return this.post(this.passesViewUrl, data, callback);\n};\n\n/**\n * Add articles to cart\n *\n * @param {Array} articles: An array of articles with the following properties:\n *                          - _id: the article _id\n *                          - variants: an arraay of {\n *                              \"_id\": the variant _id,\n *                              \"quantity\": the quantity,\n *                              \"price\": the variant price\n *                          }\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addArticlesToCart = function(articles, callback) {\n    var data = { \"articles\":  articles };\n    return this.request(\n        'POST',\n        this.parametrize_url(this.cartAddArticlesUrl, {}, true),\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set the cart in PENDING mode\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setPending = function(cart_id, callback) {\n    return this.request(\n        'PUT',\n        this.cartSetPendingUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set the cart in OPEN mode\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setOpen = function(cart_id, callback) {\n    return this.request(\n        'PUT',\n        this.cartSetOpenUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Get a new cart\n *\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.getNew = function(callback) {\n    return this.request(\n        'GET',\n        this.cartGetNewUrl,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set a cart user data\n *\n * @param {Object} user_data: An object containing the user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setUserData = function(cart_id, user_data, callback) {\n    var data = {\n        \"user_data\": user_data\n    };\n    return this.request(\n        'PUT',\n        this.cartUserDataUrl + cart_id,\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Pay the cart\n *\n * @param {integer} cart_id: The cart id\n * @param {string} payment_method: The payment method name\n * @param {Object} user_data: An object containing the user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.pay = function(cart_id, payment_method, user_data, callback) {\n    var data = {\n        \"payment_method\": payment_method,\n        \"user\": user_data\n    };\n    return this.request(\n        'POST',\n        this.payUrl + cart_id,\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Confirm a cart\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.confirm = function(cart_id, callback) {\n    return this.request(\n        'POST',\n        this.confirmUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Remove screening from cart\n *\n * @param {Number} index: The screening index in cart\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.removeFromCart = function(index, callback) {\n    var data = { \"index\": index };\n    return this.post(this.cartRemoveUrl, data, callback);\n}\n\n/**\n * Screening bookability check\n *\n * Check if the user can book the screening\n *\n * @param {UUID|Number} screening_ref: The screening ID\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.checkBookability = function(screening_ref, callback) {\n    var url = this.parametrize_url(this.checkUrl + screening_ref, {}, true);\n    return this.get(url, {}, callback);\n};\n\n/**\n * Ticket authentication\n *\n * Authenticates the user ticket\n *\n * @param number: The ticket number\n * @param key: The ticket key\n * @param callback\n */\nTicketack.prototype.loginTicket = function(number, key, callback) {\n    var data    = {\n        \"ticket_number\": number,\n        \"ticket_key\":    key\n    };\n\n    return this.post(this.loginUrl, data, callback);\n};\n\n/**\n * Ticket logout\n *\n * Logs out the user ticket\n *\n * @param callback\n */\nTicketack.prototype.logoutTicket = function(callback) {\n    return this.get(this.logoutUrl, {}, callback);\n};\n\n/**\n * Ticket view\n *\n * retrieve the current(connected) ticket informations\n *\n * @param callback\n */\nTicketack.prototype.viewTicket = function(callback) {\n    return this.post(this.loginUrl, {}, callback);\n};\n\n/**\n * Update user's e-mail address\n *\n * retrieve the current(connected) ticket informations\n *\n * @param callback\n */\nTicketack.prototype.updateTicketEmail = function(email, callback) {\n    var url = this.parametrize_url(this.updateTicketEmailUrl, {}, true);\n    return this.patch(url, { \"email\": email }, callback);\n}\n\n/**\n *\n * Book screening\n *\n * @param screening_id: The screening ID\n * @param callback\n */\nTicketack.prototype.book = function(screening_id, callback) {\n    return this.post(this.bookUrl + screening_id, {}, callback);\n};\n\n/**\n *\n * Cancel a booking\n *\n * @param {UUID|Number} booking_id: The booking ID\n * @param {Function} callback\n */\nTicketack.prototype.unbook = function(booking_id, callback) {\n    return this.post(this.unbookUrl + booking_id, {}, callback);\n};\n\n/**\n *\n * List the available passes\n *\n * @param {Function} callback\n */\nTicketack.prototype.getPasses = function(callback) {\n    var url = this.parametrize_url(this.passesUrl, {}, true);\n    return this.get(url, {}, callback);\n};\n\n/**\n * Make an HTTP GET request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.get = function(url, data, callback) {\n    return this.request('GET', url, data, {}, callback);\n};\n\n/**\n * Make an HTTP POST request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.post = function(url, data, callback) {\n    data        = data || {};\n    data.format = \"json\"\n    data.lang   = this.lang;\n    if (this.session_id)\n        data.PHPSESSID = this.session_id;\n    return this.request('POST', url, data, {}, callback);\n};\n\n/**\n * Make an HTTP PATCH request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.patch = function(url, data, callback) {\n    // ALl requests in this lib should be sent with the application/json content type.\n    // For now, all but the one sent in PATCH (because it calls the \"new\" api/controllers),\n    // are using application/x-www-form-urlencoded.\n    // When all the calls are made to the new controllers, we should set the json\n    // content type by default\n    return this.request('PATCH', url, data, { \"Content-type\": \"application/json\" }, callback);\n};\n\nTicketack.prototype.parametrize_url = function(url, params, json = false) {\n    var query = [];\n\n    query.push(\"lang=\" + this.lang);\n\n    if (json)\n        query.push(\"format=json\");\n\n    if (this.session_id)\n        query.push(\"PHPSESSID=\" + this.session_id);\n\n    for (i in params) {\n        query.push(i + '=' + params[i]);\n    }\n\n    return url + '?' + query.join('&');\n}\n\n/**\n *\n * Make an HTTP request\n *\n * @param {Function} callback\n */\nTicketack.prototype.request = function(method, url, data, headers, callback) {\n    headers = headers || {};\n    headers['X-API-Key'] = this.apiKey;\n\n    if (headers['Content-type'] && headers['Content-type'] == 'application/json')\n        data = JSON.stringify(data);\n\n    return $.ajax(url, {\n        type: method,\n        data: data,\n        headers: headers,\n        crossDomain: true,\n        xhrFields: { withCredentials: true }\n    }).done((data, textStatus, jqXHR) => {\n        const rsp = jqXHR.responseJSON;\n        if (rsp && 'session_id' in rsp) {\n            localStorage.setItem('tkt_session_id', rsp.session_id);\n            this.session_id = rsp.session_id;\n        }\n\n        return callback(null, jqXHR.status, jqXHR.responseJSON);\n    }).fail((jqXHR) => {\n        var rsp = jqXHR.responseText.length ? JSON.parse(jqXHR.responseText) : null;\n        return callback(new Error(), jqXHR.status, rsp);\n    });\n};\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], function ($) {\n            return (root.Ticketack = factory($));\n        });\n    } else {\n        // Browser globals\n        root.Ticketack = factory(root.jQuery);\n    }\n}(typeof self !== 'undefined' ? self : this, function ($) {\n    return Ticketack;\n}));\n"]}