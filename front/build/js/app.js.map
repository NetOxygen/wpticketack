{"version":3,"sources":["ext/ticketack.js"],"names":["e","a","Ticketack","loginUrl","lang","module","exports","define","amd","moment","this","apiKey","cartViewUrl","eshopUrl","url","parametrize_url","ticketViewUrl","prototype","toString","call","params","Object","cartSetOpenUrl","cartUserDataUrl","screeningUrl","bookUrl","logoutUrl","t","that","callback","L","addToCart","data","screening_id","headers","getPassesViewUrl","s","utc","userdata","pass","_pf","unusedTokens","unusedInput","session_id","nullInput","getScreeningViewUrl","iso","cart_id","request","payment_method","localStorage","parsedDateParts","isNaN","_d","getTime","overflow","empty","invalidMonth","invalidWeekday","weekdayMismatch","invalidFormat","userInvalidated","meridiem","getScreeningsInfo","charsLeftOver","length","bigHour","isFrozen","updateTicketEmail","Y","n","Array","some","get","k","PHPSESSID","o","_isAMomentObject","_i","_f","_l","_strict","_tzm","_isUTC","_offset","_locale","d","Date","ajax","cartAddArticlesUrl","isValid","NaN","updateOffset","cartSetPendingUrl","root","Math","ceil","isFinite","T","min","r","pay","user_data","w","l","suppressDeprecationWarnings","console","warn","deprecationHandler","removeFromCart","index","arguments","cartRemoveUrl","checkBookability","push","slice","join","Error","stack","apply","v","patch","h","i","post","j","set","passesUrl","keys","format","toLowerCase","x","json","query","A","abs","pow","max","substr","z","J","N","R","I","JSON","stringify","$","type","method","localeData","ordinal","crossDomain","xhrFields","withCredentials","textStatus","jqXHR","status","match","replace","rsp","responseText","H","factory","invalidDate","G","longDateFormat","test","lastIndex"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * Ticketack integration class\n *\n * This class can manage all the Ticketack public API calls:\n *     - Compute URLs to view user cart, user pass (bookings), show screening\n *       page and buy pass page on the Ticketack eshop\n *     - Load the user cart\n *     - Add a screening to the user cart\n *     - Remove a screening from the user cart\n *     - Check a screening bookability\n *     - Login with a ticket\n *     - Book a screening with a ticket\n *     - Cancel a booking on a ticket\n *     - List the available passes\n *     - Update e-mail information in ticket\n *\n * @version 5.1.0 - 2019-02-19\n *\n * @copyright NetOxygen 2015-2018\n *\n * @param {String} eshopUrl: The Ticketack instance base URL\n * @param {String} apiKey: The API key\n * @param {String} lang: The language\n */\nvar Ticketack = function(eshopUrl, apiKey, lang) {\n\n    this.session_id            = localStorage.getItem('tkt_session_id') != undefined ? localStorage.getItem('tkt_session_id') : \"\";\n    this.eshopUrl              = eshopUrl;\n    this.apiKey                = apiKey;\n    this.lang                  = lang ? lang : '';\n\n    this.cartViewUrl           = this.eshopUrl + \"cart/view/\";\n    this.ticketViewUrl         = this.eshopUrl + \"ticket/view/\";\n    this.passesViewUrl         = this.eshopUrl + \"pass/new/\";\n    this.screeningViewUrl      = this.eshopUrl + \"screening/buy/\";\n\n    this.cartJsonUrl           = this.eshopUrl + \"cart/view_json\";\n    this.cartRemoveUrl         = this.eshopUrl + \"cart/remove\";\n    this.cartAddUrl            = this.eshopUrl + \"screening/buy/\";\n    this.cartAddArticlesUrl    = this.eshopUrl + \"articles/add_to_cart\";\n    this.cartSetPendingUrl     = this.eshopUrl + \"carts/pending/id/\";\n    this.cartSetOpenUrl        = this.eshopUrl + \"carts/open/id/\";\n    this.cartGetNewUrl         = this.eshopUrl + \"carts/new/\";\n    this.cartUserDataUrl       = this.eshopUrl + \"carts/user_data/\";\n    this.payUrl                = this.eshopUrl + \"carts/pay/id/\";\n    this.confirmUrl            = this.eshopUrl + \"carts/confirm/id/\";\n    this.screeningUrl          = this.eshopUrl + \"screening/info_json/\";\n    this.bookUrl               = this.eshopUrl + \"screening/book_on_ticket/\";\n    this.unbookUrl             = this.eshopUrl + \"ticket/cancel_booking_json/\";\n    this.checkUrl              = this.eshopUrl + \"screening/bookability/\";\n    this.loginUrl              = this.eshopUrl + \"ticket/view_json/\";\n    this.logoutUrl             = this.eshopUrl + \"ticket/disable_book_mode_json/\";\n    this.updateTicketEmailUrl  = this.eshopUrl + \"tickets/contact_email/\";\n    this.passesUrl             = this.eshopUrl + \"pass/tickettypes_json/\";\n};\n\n/**\n * User cart url getter\n */\nTicketack.prototype.getCartViewUrl   = function() {\n    var url = this.parametrize_url(this.cartViewUrl, {});\n    return url;\n}\n\n/**\n * User ticket url getter\n */\nTicketack.prototype.getTicketViewUrl = function() {\n    var url = this.parametrize_url(this.ticketViewUrl, {});\n    return url;\n}\n\n/**\n * Buy pass url getter (optional tickettype_id and pricing_id to select specific pass)\n */\nTicketack.prototype.getPassesViewUrl = function(tickettype_id, pricing_id) {\n    var params = {};\n    if (tickettype_id) {\n        params.tickettype = tickettype_id;\n        if (pricing_id) {\n            params.pricing = pricing_id;\n        }\n    }\n    var url = this.parametrize_url(this.passesViewUrl, params);\n    return url;\n}\n\n/**\n * Buy screening url getter\n */\nTicketack.prototype.getScreeningViewUrl = function(screening_ref) {\n    var url = this.parametrize_url(this.screeningViewUrl + screening_ref, {});\n    return url;\n}\n\n/**\n * Fetch cart data from Eshop\n *\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.loadCart = function(callback) {\n    var that = this;\n    var url = this.parametrize_url(this.cartJsonUrl, {}, true);\n\n    return this.get(url, {}, function (err, status, rsp) {\n        if (err)\n            return callback && callback(err, status, rsp);\n\n        localStorage.setItem('tkt_session_id', rsp.session_id);\n        that.session_id = rsp.session_id;\n\n        return callback && callback(null, status, rsp);\n    });\n};\n\n/**\n * Fetch the informations about a screening\n *\n * @param {Array} screening_refs: Array with screening_refs\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.getScreeningsInfo = function(screening_refs, callback) {\n    var url = this.parametrize_url(this.screeningUrl, { \"ids\": screening_refs.join(\",\") }, true);\n    return this.get(url, {}, callback);\n}\n\n/**\n * Add a screening to cart\n *\n * @param {UUID|Number} screening_id: The screening ID\n * @param {Object} pricing: An object containing pricing properties. Ex: {\"reduced\": 1, \"fullprice\": 2}\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addToCart = function(screening_id, pricing, callback) {\n    var data = {\n        \"id\":        screening_id,\n        \"pricing\":   pricing || {}\n    };\n    return this.post(this.cartAddUrl + screening_id, data, callback);\n};\n\n/**\n * Add a pass to cart\n *\n * @param {String} pass: The pass type\n * @param {String} pricing: The pricing key\n * @param {Object} userdata: The user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addPassToCart = function(pass, pricing, userdata, callback) {\n    headers = {};\n    headers['X-API-Key']    = this.apiKey;\n    headers['Content-type'] = undefined;\n\n    userdata.pass = pass + ':' + pricing;\n    let data = {\n        \"user\": userdata,\n        \"format\": \"json\"\n    };\n    if (this.session_id)\n        data.PHPSESSID = this.session_id;\n\n    return this.post(this.passesViewUrl, data, callback);\n};\n\n/**\n * Add articles to cart\n *\n * @param {Array} articles: An array of articles with the following properties:\n *                          - _id: the article _id\n *                          - variants: an arraay of {\n *                              \"_id\": the variant _id,\n *                              \"quantity\": the quantity,\n *                              \"price\": the variant price\n *                          }\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.addArticlesToCart = function(articles, callback) {\n    var data = { \"articles\":  articles };\n    return this.request(\n        'POST',\n        this.parametrize_url(this.cartAddArticlesUrl, {}, true),\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set the cart in PENDING mode\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setPending = function(cart_id, callback) {\n    return this.request(\n        'PUT',\n        this.cartSetPendingUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set the cart in OPEN mode\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setOpen = function(cart_id, callback) {\n    return this.request(\n        'PUT',\n        this.cartSetOpenUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Get a new cart\n *\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.getNew = function(callback) {\n    return this.request(\n        'GET',\n        this.cartGetNewUrl,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Set a cart user data\n *\n * @param {Object} user_data: An object containing the user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.setUserData = function(cart_id, user_data, callback) {\n    var data = {\n        \"user_data\": user_data\n    };\n    return this.request(\n        'PUT',\n        this.cartUserDataUrl + cart_id,\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Pay the cart\n *\n * @param {integer} cart_id: The cart id\n * @param {string} payment_method: The payment method name\n * @param {Object} user_data: An object containing the user data\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.pay = function(cart_id, payment_method, user_data, callback) {\n    var data = {\n        \"payment_method\": payment_method,\n        \"user\": user_data\n    };\n    return this.request(\n        'POST',\n        this.payUrl + cart_id,\n        data,\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Confirm a cart\n *\n * @param {integer} cart_id: The cart id\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.confirm = function(cart_id, callback) {\n    return this.request(\n        'POST',\n        this.confirmUrl + cart_id,\n        {},\n        { \"Content-type\": \"application/json\" },\n        callback\n    );\n};\n\n/**\n * Remove screening from cart\n *\n * @param {Number} index: The screening index in cart\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.removeFromCart = function(index, callback) {\n    var data = { \"index\": index };\n    return this.post(this.cartRemoveUrl, data, callback);\n}\n\n/**\n * Screening bookability check\n *\n * Check if the user can book the screening\n *\n * @param {UUID|Number} screening_ref: The screening ID\n * @param {Function} callback: The callback function\n */\nTicketack.prototype.checkBookability = function(screening_ref, callback) {\n    var url = this.parametrize_url(this.checkUrl + screening_ref, {}, true);\n    return this.get(url, {}, callback);\n};\n\n/**\n * Ticket authentication\n *\n * Authenticates the user ticket\n *\n * @param number: The ticket number\n * @param key: The ticket key\n * @param callback\n */\nTicketack.prototype.loginTicket = function(number, key, callback) {\n    var data    = {\n        \"ticket_number\": number,\n        \"ticket_key\":    key\n    };\n\n    return this.post(this.loginUrl, data, callback);\n};\n\n/**\n * Ticket logout\n *\n * Logs out the user ticket\n *\n * @param callback\n */\nTicketack.prototype.logoutTicket = function(callback) {\n    return this.get(this.logoutUrl, {}, callback);\n};\n\n/**\n * Ticket view\n *\n * retrieve the current(connected) ticket informations\n *\n * @param callback\n */\nTicketack.prototype.viewTicket = function(callback) {\n    return this.post(this.loginUrl, {}, callback);\n};\n\n/**\n * Update user's e-mail address\n *\n * retrieve the current(connected) ticket informations\n *\n * @param callback\n */\nTicketack.prototype.updateTicketEmail = function(email, callback) {\n    var url = this.parametrize_url(this.updateTicketEmailUrl, {}, true);\n    return this.patch(url, { \"email\": email }, callback);\n}\n\n/**\n *\n * Book screening\n *\n * @param screening_id: The screening ID\n * @param callback\n */\nTicketack.prototype.book = function(screening_id, callback) {\n    return this.post(this.bookUrl + screening_id, {}, callback);\n};\n\n/**\n *\n * Cancel a booking\n *\n * @param {UUID|Number} booking_id: The booking ID\n * @param {Function} callback\n */\nTicketack.prototype.unbook = function(booking_id, callback) {\n    return this.post(this.unbookUrl + booking_id, {}, callback);\n};\n\n/**\n *\n * List the available passes\n *\n * @param {Function} callback\n */\nTicketack.prototype.getPasses = function(callback) {\n    var url = this.parametrize_url(this.passesUrl, {}, true);\n    return this.get(url, {}, callback);\n};\n\n/**\n * Make an HTTP GET request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.get = function(url, data, callback) {\n    return this.request('GET', url, data, {}, callback);\n};\n\n/**\n * Make an HTTP POST request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.post = function(url, data, callback) {\n    data        = data || {};\n    data.format = \"json\"\n    data.lang   = this.lang;\n    if (this.session_id)\n        data.PHPSESSID = this.session_id;\n    return this.request('POST', url, data, {}, callback);\n};\n\n/**\n * Make an HTTP PATCH request\n *\n * @param {String} url\n * @param {Object} data\n * @param {Function} callback\n */\nTicketack.prototype.patch = function(url, data, callback) {\n    // ALl requests in this lib should be sent with the application/json content type.\n    // For now, all but the one sent in PATCH (because it calls the \"new\" api/controllers),\n    // are using application/x-www-form-urlencoded.\n    // When all the calls are made to the new controllers, we should set the json\n    // content type by default\n    return this.request('PATCH', url, data, { \"Content-type\": \"application/json\" }, callback);\n};\n\nTicketack.prototype.parametrize_url = function(url, params, json = false) {\n    var query = [];\n\n    query.push(\"lang=\" + this.lang);\n\n    if (json)\n        query.push(\"format=json\");\n\n    if (this.session_id)\n        query.push(\"PHPSESSID=\" + this.session_id);\n\n    for (i in params) {\n        query.push(i + '=' + params[i]);\n    }\n\n    return url + '?' + query.join('&');\n}\n\n/**\n *\n * Make an HTTP request\n *\n * @param {Function} callback\n */\nTicketack.prototype.request = function(method, url, data, headers, callback) {\n    headers = headers || {};\n    headers['X-API-Key'] = this.apiKey;\n\n    if (headers['Content-type'] && headers['Content-type'] == 'application/json')\n        data = JSON.stringify(data);\n\n    return $.ajax(url, {\n        type: method,\n        data: data,\n        headers: headers,\n        crossDomain: true,\n        xhrFields: { withCredentials: true }\n    }).done(\n        function (data, textStatus, jqXHR) {\n            return callback(null, jqXHR.status, jqXHR.responseJSON);\n        }\n    ).fail(\n        function (jqXHR) {\n            var rsp = jqXHR.responseText.length ? JSON.parse(jqXHR.responseText) : null;\n            return callback(new Error(), jqXHR.status, rsp);\n        }\n    );\n};\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], function ($) {\n            return (root.Ticketack = factory($));\n        });\n    } else {\n        // Browser globals\n        root.Ticketack = factory(root.jQuery);\n    }\n}(typeof self !== 'undefined' ? self : this, function ($) {\n    return Ticketack;\n}));\n"]}