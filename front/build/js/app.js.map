{"version":3,"sources":["app/Models/Cart.js"],"names":["e","a","define","Cart","CHECKOUT_STEP_CONFIRM","Object","prototype","toString","call","_this","cart","_","mapKeys","hasOwnProperty","o","order_id","loadItemsInfos","length","_this2","items","Screening","screening_ids","filter","_id","d","Date","getInfos","s","t","callback","total","reduce","l","toFixed","h","valueOf","c","ba","utc","memo","parseFloat","item","unusedTokens","unusedInput","load","TKTApi","nullInput","invalidEra","invalidMonth","invalidFormat","userInvalidated"],"mappings":"CAAA,SAAAA,EAAAC,GAGAC,iB,gIAHA,C,iFAKIC,SAAAA,EAAAA,GAIAA,OAAKC,aAAAA,OAA8B,mBAJ8BC,OAAAC,UAAAC,SAAAC,KAAAR,GAgB/B,SAJdG,EAAAA,GAAA,OAAAM,MAAAT,GAAA,oBAAAK,OAAAC,UAAAC,SAAAC,KAAAR,GAAA,SAQ2BU,EACvCA,EAAAA,GADuCC,OAR3BC,OAQ2BD,UAR3BE,eAAAL,KAAAR,EAAAC,GAAA,SAAAa,EAAAd,GAZ6C,GAAAK,OAAAU,oBA8B5DT,OAALH,IAAea,OAAAA,oBA9BkDhB,GAAAiB,OAAA,IA8BdC,EA9Bc,IAY7CjB,KAAAD,EAwBS,GACrBmB,EADqBnB,EACrBW,GAAA,OAAA,OAzBY,EAkB+BR,SAU/CiB,EAAAA,GAAkC,YAAAF,IAAAlB,EAC9B,SAGAkB,EAAAA,GACI,MAAAG,iBACqCV,GAAAW,oBAASC,OAAAA,UAAAA,SAAAA,KAAAA,GAAAA,SAATC,EAAAxB,GAAA,OAAAA,aAAAyB,MAAA,kBAAApB,OAAAC,UAAAC,SAAAC,KAAAR,GANX,SAAqBoB,EAAAA,EAWnDM,GArB2C,IAUQ,IAVRC,EAAA,GAAAC,EA9Bc,EAAAA,EAAAC,EAAAA,SAAAD,EAwDvDE,EAAAA,KAAAA,EAAAA,EAAAA,GAAUC,IAAmB,OAAAJ,EADO,SAAAK,EAAAhC,EAAAC,GAAA,IAAA,IAAA2B,KAC4CK,EAAnDC,EAAAjC,EAxD0B2B,KAAA5B,EAwD1B4B,GAAA3B,EAAA2B,IAAA,OAhBoBM,EAAAjC,EAAA,cAAAD,EAAAO,SAAAN,EAAAM,UAAA2B,EAAAjC,EAAA,aAAAD,EAAAmC,QAAAlC,EAAAkC,SAAAnC,EAAA,SAArBoC,EAAApC,EAAAC,EAAA2B,EAAAD,GAxC2B,OAAAU,GAAArC,EAAAC,EAAA2B,EAAAD,GAAA,GAAAW,MAAA,SAsE1DnC,EAAAA,GAtE0D,OAAA,MAAAoC,EAAAA,MAAAC,EAAAA,IAAAC,CAAA9B,OAAAsB,EA0D7DS,aAAUZ,GA1DmDa,YAAA,GA6D5DC,UAAO,EACRC,cAAgB,EACZC,WAAA,EAAAC,WACWlB,KAEXmB,aAAOnB,KALiBoB,eAAA,EA7DiCC,iBAAA,EAsE1D/C,KAtE0D,EAFrED,gBAAAA","file":"app.js","sourcesContent":["/**\n * Cart model\n */\ndefine(\n    ['lodash', 'api', 'app/Models/Base', 'CartItem', 'Screening'],\n    function dependencies(_, TKTApi, BaseModel, CartItem, Screening) {\n\n    Cart.type = 'cart';\n\n    Cart.CHECKOUT_STEP_CONFIRM       = 'confirm';\n    Cart.CHECKOUT_STEP_GO_TO_PAYMENT = 'go_to_payment';\n\n    /**\n     * Constructor\n     *\n     * @param {Object} cart like returned from the engine\n     */\n    function Cart(cart) {\n        BaseModel.call(this, cart);\n        cart = cart || {};\n\n        _.mapKeys(cart, (val, key) => {\n            this[key] = val;\n        });\n\n        if (this.order_id && this.order_id.length) {\n            const parts = this.order_id.split('-');\n            this.id = parts.length > 1 && parts[1].length > 0 ?\n                parseInt(parts[1]) :\n                null;\n        }\n\n        this.items = _.map(this.items, (i) => new CartItem(i));\n    }\n\n    Cart.prototype.loadItemsInfos = function(callback) {\n\n        if (!this.items || this.items.length === 0)\n            return callback(/*err*/null);\n\n        let screening_ids = _.map(\n            _.filter(this.items, (i) => i.type === CartItem.SCREENING_TYPE),\n            (i) => i.item_id\n        );\n\n        Screening.getInfos(screening_ids, (err, screenings) => {\n            if (err)\n                return callback(err);\n\n            this.items = _.map(this.items, (i) => {\n                if (i.type === CartItem.SCREENING_TYPE)\n                    i.screening = _.find(screenings, (s) => s._id === i.item_id);\n\n                return i;\n            });\n\n            return callback(/*err*/null);\n        });\n    };\n\n    Cart.prototype.getFormattedTotal = function() {\n        const total = _.reduce(this.items, (memo, item) => memo + parseFloat(item.amount), 0).toFixed(2);\n\n        return `${total} CHF`;\n    };\n\n    Cart.load = function (callback) {\n        TKTApi.loadCart((err, status, rsp) => {\n            if (err)\n                return callback(err);\n\n            return callback(/*err*/null, new Cart(rsp));\n        });\n    };\n\n    return Cart;\n});\n"]}