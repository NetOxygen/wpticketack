{"version":3,"sources":["app/Media/YoutubeVideo.js"],"names":["e","a","define","postal","YoutubeVideo","$container","player","loaded","Array","Object","prototype","toString","call","video_image","carousel_id","onYouTubeIframeAPIReady","window","controls","showinfo","attach","callback","u","init","Date","M","subscribe","t","s","push","channel","h","_this","hasOwnProperty","valueOf","c","va","utc","Y","topic","_pf","empty","unusedTokens","unusedInput","overflow","charsLeftOver","nullInput","autoplay","meridiem","onStateChange","weekdayMismatch","$frame","y","_this2","playVideo","$video_image","$play_btn","show","action","length","bigHour","isFrozen","_isValid","PlayerState","f","NaN","L","userInvalidated","n","some","this","loadPlayer","d","l","momentProperties","k","host","events","o","playerVars","_isAMomentObject","_i","_f","_l","_strict","_tzm","_isUTC","_offset","_locale","p","_d","getTime","isValid","updateOffset","D","T","click","Math","floor","g","r","min","abs","detach"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * Play a Youtube video inside an iframe.\n * It loads and uses the Youtube Iframe API\n *\n * Usage:\n *\n * <div\n *    <!-- Required -->\n *    data-component=\"Media/YoutubeVideo\"\n *    data-video-id=\"[VIDEO ID]\"\n *\n *    <!-- Optional -->\n *    data-video-image=\"[IMAGE URL]\"\n *    data-bs4-carousel-id=\"[CAROUSEL ID]\"\n *    data-autoplay=\"1|0\"                   <!-- default: 0 -->\n *    data-controls=\"1|0\"                   <!-- default: 0 -->\n *    data-showinfo=\"1|0\"                   <!-- default: 0 -->\n * >\n *\n * If the video is embedded in a Bootstrap 4 carousel, set the\n * data-bs4-carousel-id to pause the carousel while the video is played\n * and to stop the video if the user slides while paying it.\n */\ndefine(\n    ['postal', 'jquery', 'bootstrap'],\n    function dependencies(postal, $) {\n\n    function YoutubeVideo($container, state) {\n        this.$container = $container;\n        this.player     = null;\n        this.loaded     = false;\n\n        this.video_id    = this.$container.data('video-id');\n        this.video_image = this.$container.data('video-image');\n        this.carousel_id = this.$container.data('bs4-carousel-id');\n\n        this.autoplay    = this.$container.data('autoplay') || \"0\";\n        this.controls    = this.$container.data('controls') || \"0\";\n        this.showinfo    = this.$container.data('showinfo') || \"0\";\n    }\n\n    YoutubeVideo.prototype = {\n        attach: function() {\n            this.init();\n        },\n\n        init: function() {\n            this.$container.addClass('yt-video-container');\n            this.$video_container = $('<div></div>')\n                .attr('id', 'yt-video-' + this.video_id + '-' + new Date().getTime())\n                .appendTo(this.$container);\n\n            postal.subscribe({\n                channel: \"youtubeIframeApi\",\n                topic: \"ready\",\n                callback: (data, envelope) => {\n                    !this.loaded && this.loadPlayer();\n                    this.loaded = true;\n                }\n            });\n\n            if (typeof(YT) == 'undefined' || typeof(YT.Player) == 'undefined') {\n                // Set Youtube callback\n                window.onYouTubeIframeAPIReady = this.onYouTubeIframeAPIReady.bind(this),\n                // Load API script\n                $.getScript('//www.youtube.com/iframe_api');\n            } else {\n                this.loadPlayer();\n            }\n\n            if (this.carousel_id) {\n                // Subscribe on the carousel slide events to stop the video when needed.\n                postal.subscribe({\n                    channel: \"carousel-\" + this.carousel_id,\n                    topic: \"slide\",\n                    callback: (data, envelope) => {\n                        this.player && this.player.stopVideo();\n                    }\n                });\n            }\n        },\n\n        onYouTubeIframeAPIReady: function() {\n            postal.publish({\n                channel: \"youtubeIframeApi\",\n                topic: \"ready\"\n            });\n        },\n\n        onStateChange: function(e) {\n            // Inform the BS4 carousel of video state changes, so as to\n            // pause or resume the slide when needed.\n            if (this.carousel_id) {\n                switch (e.data) {\n                    case YT.PlayerState.BUFFERING:\n                    case YT.PlayerState.PLAYING:\n                        postal.publish({\n                            channel: \"carousel-\" + this.carousel_id,\n                            topic: \"action\",\n                            data: { action: 'pause' }\n                        });\n                        break;\n                    case YT.PlayerState.ENDED:\n                        postal.publish({\n                            channel: \"carousel-\" + this.carousel_id,\n                            topic: \"action\",\n                            data: { action: 'cycle' }\n                        });\n                        break;\n                }\n            }\n        },\n\n        loadPlayer: function() {\n            this.player = new YT.Player(this.$video_container.attr('id'), {\n                videoId: this.video_id,\n                width: this.$container.width(),\n\n                // see https://stackoverflow.com/a/47724503\n                host: 'https://www.youtube.com',\n\n                events: {\n                    onStateChange: this.onStateChange.bind(this)\n                },\n                // For a list of all parameters, see:\n                // https://developers.google.com/youtube/player_parameters\n                playerVars: {\n                    autoplay: this.autoplay,\n                    controls: this.controls,\n                    showinfo: this.showinfo,\n                    modestbranding: 1,\n                    rel: 0,\n                }\n            });\n\n            if (this.video_image) {\n                const $frame = $('iframe', this.$container);\n                $frame.hide();\n\n                this.$video_image = $('<img />')\n                    .attr('src', this.video_image)\n                    .attr('style', 'max-width: 924px')\n                    .addClass('yt-video-image')\n                    .appendTo(this.$container);\n\n                this.$play_btn = $('<div></div>')\n                    .addClass('yt-video-play-image')\n                    .appendTo(this.$container);\n\n                this.$play_btn.click((e) => {\n                    this.player.playVideo();\n                    this.$video_image.addClass('hidden');\n                    this.$play_btn.addClass('hidden');\n                    $frame.show();\n                });\n            }\n        },\n\n        detach: function() {\n\n        }\n    };\n\n    return YoutubeVideo;\n});\n"]}